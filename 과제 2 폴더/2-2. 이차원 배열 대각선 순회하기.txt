#include <iostream>
#include <string>
#include <vector>

using namespace std;

class Check
{
    private:
        bool result = true;

    public:
        Check();
        // board 길이 확인
        void check_board_length(vector<vector<int>> board)
        {
            if((1 <= board.size()) && (board.size() <= 100))
            {
                this->result = true;
            }
            else
            {
                this->result = false;
            }
        }
        // 1 ≤ board[i]의 길이 ≤ 100
        // 1 ≤ board[i][j] ≤ 10,000
        // 모든 board[i]의 길이는 같습니다.
        void check_length_i_j(vector<vector<int>> board)
        {
            int count = 0;
            for(vector<int> board_i : board)
            {
                if((1 <= board_i.size()) && (board_i.size() <= 100))
                {
                    if(count == 0)
                    {
                        count = board_i.size();
                    }
                    else
                    {
                        if(count != board_i.size())
                        {
                            this->result = false;
                            break;
                        }
                    }
                }
                for(int j : board_i)
                {
                    // 1 ≤ board[i][j] ≤ 10,000 조건인데 왜 입력을 0을하는거죠
                    if(!((0 <= j) && (j <= 10000)))
                    {
                        this->result = false;
                        break;
                    }
                }
            }
        }
        // 변수 k와 board 크기확인
        void check_k(vector<vector<int>> board, int k)
        {
            int board_size = board.size();
            if(0 <= k)
            {
                for(vector<int> i : board)
                {
                    if(!(k <= (i.size() + board_size)))
                    {
                        this->result = false;
                    }
                }
            }
            else
            {
                this->result = false;
            }
        }
        // 결과 확인 매서드
        bool get_result()
        {
            return this->result;
        }

    ~Check();
};

Check::Check()
{

};

Check::~Check()
{

};

int solution(vector<vector<int>> board, int k) {
    int answer = 0;

    Check check_result;
    check_result.check_board_length(board);
    check_result.check_length_i_j(board);
    check_result.check_k(board, k);

    if(check_result.get_result())
    {
        for(int i = 0; i < board.size(); i++)
        {
            for(int j = 0; j < board[i].size(); j++)
            {
                if((i + j) <= k)
                {
                    answer += board[i][j];
                }
            }
        }
    }

    return answer;
}